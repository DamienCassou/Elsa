(require 'elsa-types)
(require 'elsa-type-helpers)

;; File: data.c
(put 'eq 'elsa-type (elsa-make-type Mixed -> Mixed -> Bool))
(put 'null 'elsa-type (elsa-make-type Mixed -> Bool))
(put 'type-of 'elsa-type (elsa-make-type Mixed -> Symbol))
(put 'consp 'elsa-type (elsa-make-type Mixed -> Bool))
(put 'atom 'elsa-type (elsa-make-type Mixed -> Bool))
(put 'listp 'elsa-type (elsa-make-type Mixed -> Bool))
(put 'nlistp 'elsa-type (elsa-make-type Mixed -> Bool))
(put 'symbolp 'elsa-type (elsa-make-type Mixed -> Bool))
(put 'keywordp 'elsa-type (elsa-make-type Mixed -> Bool))
(put 'vectorp 'elsa-type (elsa-make-type Mixed -> Bool))
(put 'stringp 'elsa-type (elsa-make-type Mixed -> Bool))
(put 'multibyte-string-p 'elsa-type (elsa-make-type Mixed -> Bool))
(put 'char-table-p 'elsa-type (elsa-make-type Mixed -> Bool))
(put 'vector-or-char-table-p 'elsa-type (elsa-make-type Mixed -> Bool))
(put 'bool-vector-p 'elsa-type (elsa-make-type Mixed -> Bool))
(put 'arrayp 'elsa-type (elsa-make-type Mixed -> Bool))
(put 'sequencep 'elsa-type (elsa-make-type Mixed -> Bool))
(put 'bufferp 'elsa-type (elsa-make-type Mixed -> Bool))
(put 'markerp 'elsa-type (elsa-make-type Mixed -> Bool))
(put 'user-ptrp 'elsa-type (elsa-make-type Mixed -> Bool))
(put 'subrp 'elsa-type (elsa-make-type Mixed -> Bool))
(put 'byte-code-function-p 'elsa-type (elsa-make-type Mixed -> Bool))
(put 'char-or-string-p 'elsa-type (elsa-make-type Mixed -> Bool))
(put 'integerp 'elsa-type (elsa-make-type Mixed -> Bool))
(put 'integer-or-marker-p 'elsa-type (elsa-make-type Mixed -> Bool))
(put 'natnump 'elsa-type (elsa-make-type Mixed -> Bool))
(put 'numberp 'elsa-type (elsa-make-type Mixed -> Bool))
(put 'number-or-marker-p 'elsa-type (elsa-make-type Mixed -> Bool))
(put 'floatp 'elsa-type (elsa-make-type Mixed -> Bool))
(put 'car 'elsa-type (elsa-make-type Cons | Nil -> Mixed))
(put 'car-safe 'elsa-type (elsa-make-type Cons | Nil -> Mixed))
(put 'cdr 'elsa-type (elsa-make-type Cons | Nil -> Mixed))
(put 'cdr-safe 'elsa-type (elsa-make-type Cons | Nil -> Mixed))
(put 'setcar 'elsa-type (elsa-make-type Cons -> Mixed -> Mixed))
(put 'setcdr 'elsa-type (elsa-make-type Cons -> Mixed -> Mixed))
(put 'boundp 'elsa-type (elsa-make-type Symbol -> Bool))
(put 'fboundp 'elsa-type (elsa-make-type Symbol -> Bool))
;; (put 'makunbound 'elsa-type (elsa-make-type ))
;; (put 'fmakunbound 'elsa-type (elsa-make-type ))
;; (put 'symbol-function 'elsa-type (elsa-make-type ))
(put 'symbol-plist 'elsa-type (elsa-make-type Symbol -> List))
(put 'symbol-name 'elsa-type (elsa-make-type Symbol -> String))
;; (put 'fset 'elsa-type (elsa-make-type ))
;; (put 'defalias 'elsa-type (elsa-make-type ))
(put 'setplist 'elsa-type (elsa-make-type Symbol -> List -> List))
;; TODO: can have a constant return type Cons Int (Int | 'many)
;; (put 'subr-arity 'elsa-type (elsa-make-type Mixed -> Cons Int (Int | Symbol)))
;; (put 'subr-name 'elsa-type (elsa-make-type ))
;; (put 'interactive-form 'elsa-type (elsa-make-type ))
(put 'indirect-variable 'elsa-type (elsa-make-type Symbol -> Symbol))
(put 'symbol-value 'elsa-type (elsa-make-type Symbol -> Mixed))
(put 'set 'elsa-type (elsa-make-type Symbol -> Mixed -> Mixed))
(put 'default-boundp 'elsa-type (elsa-make-type Symbol -> Bool))
(put 'default-value 'elsa-type (elsa-make-type Symbol -> Mixed))
(put 'set-default 'elsa-type (elsa-make-type Symbol -> Mixed -> Mixed))
;; SPECIAL FORM (put 'setq-default 'elsa-type (elsa-make-type ))
(put 'make-variable-buffer-local 'elsa-type (elsa-make-type Symbol -> Symbol))
(put 'make-local-variable 'elsa-type (elsa-make-type Symbol -> Symbol))
(put 'kill-local-variable 'elsa-type (elsa-make-type Symbol -> Symbol))
;; (put 'make-variable-frame-local 'elsa-type (elsa-make-type ))
(put 'local-variable-p 'elsa-type (elsa-make-type Symbol -> Buffer? -> Bool))
(put 'local-variable-if-set-p 'elsa-type (elsa-make-type Symbol -> Buffer? -> Bool))
(put 'variable-binding-locus 'elsa-type (elsa-make-type Symbol -> Buffer | Frame | Nil))
;; (put 'terminal-local-value 'elsa-type (elsa-make-type ))
;; (put 'set-terminal-local-value 'elsa-type (elsa-make-type ))
;; (put 'indirect-function 'elsa-type (elsa-make-type ))
(put 'aref 'elsa-type (elsa-make-type String | Vector -> Int -> Mixed))
;; TODO: can have a generic type (elsa-make-type String | Vector -> Int -> a -> a)
;; Also other functions which are of a "set" variety which take
;; something, set a variable to that value and return the same thing
;; back.
(put 'aset 'elsa-type (elsa-make-type String | Vector -> Int -> Mixed -> Mixed))
;; TODO: should also accept markers
(put '= 'elsa-type (elsa-make-type Number -> Number... -> Bool))
(put '< 'elsa-type (elsa-make-type Number -> Number... -> Bool))
(put '> 'elsa-type (elsa-make-type Number -> Number... -> Bool))
(put '<= 'elsa-type (elsa-make-type Number -> Number... -> Bool))
(put '>= 'elsa-type (elsa-make-type Number -> Number... -> Bool))
(put '/= 'elsa-type (elsa-make-type (Number | Marker) -> (Number | Marker) -> Bool))
(put 'number-to-string 'elsa-type (elsa-make-type Number -> String))
(put 'string-to-number 'elsa-type (elsa-make-type String -> Number))
(put '+ 'elsa-type (elsa-make-type Number... -> Number))
(put '- 'elsa-type (elsa-make-type Number... -> Number))
(put '* 'elsa-type (elsa-make-type Number... -> Number))
(put '/ 'elsa-type (elsa-make-type Number -> Number... -> Number))
(put '% 'elsa-type (elsa-make-type Number -> Number -> Number))
(put 'mod 'elsa-type (elsa-make-type Number -> Number -> Number))
(put 'max 'elsa-type (elsa-make-type Number -> Number... -> Number))
(put 'min 'elsa-type (elsa-make-type Number -> Number... -> Number))
;; TODO: should also accept markers
(put 'logand 'elsa-type (elsa-make-type Int... -> Int))
(put 'logior 'elsa-type (elsa-make-type Int... -> Int))
(put 'logxor 'elsa-type (elsa-make-type Int... -> Int))
(put 'ash 'elsa-type (elsa-make-type Int -> Int -> Int))
(put 'lsh 'elsa-type (elsa-make-type Int -> Int -> Int))
(put '1+ 'elsa-type (elsa-make-type Number | Marker -> Int))
(put '1- 'elsa-type (elsa-make-type Number | Marker -> Int))
(put 'lognot 'elsa-type (elsa-make-type Int -> Int))
;; TODO: we can not have a function with just a return type right now
;; as this would break the code fetching args/return.  We need to add
;; methods for this so that all other types simply return itself as
;; return type. See #12
;; (put 'byteorder 'elsa-type (elsa-make-type Int))
;; TODO: Implement bool vectors
;; (put 'bool-vector-exclusive-or 'elsa-type (elsa-make-type ))
;; (put 'bool-vector-union 'elsa-type (elsa-make-type ))
;; (put 'bool-vector-intersection 'elsa-type (elsa-make-type ))
;; (put 'bool-vector-set-difference 'elsa-type (elsa-make-type ))
;; (put 'bool-vector-subsetp 'elsa-type (elsa-make-type ))
;; (put 'bool-vector-not 'elsa-type (elsa-make-type ))
;; (put 'bool-vector-count-population 'elsa-type (elsa-make-type ))
;; (put 'bool-vector-count-consecutive 'elsa-type (elsa-make-type ))


;; File: fns.c
;; (put 'identity 'elsa-type (elsa-make-type ))
;; (put 'random 'elsa-type (elsa-make-type ))
(put 'length 'elsa-type (elsa-make-type List -> Int))
;; (put 'safe-length 'elsa-type (elsa-make-type ))
;; (put 'string-bytes 'elsa-type (elsa-make-type ))
;; (put 'string-equal 'elsa-type (elsa-make-type ))
;; (put 'compare-strings 'elsa-type (elsa-make-type ))
;; (put 'string-lessp 'elsa-type (elsa-make-type ))
;; (put 'string-collate-lessp 'elsa-type (elsa-make-type ))
;; (put 'string-collate-equalp 'elsa-type (elsa-make-type ))
;; (put 'append 'elsa-type (elsa-make-type ))
;; (put 'concat 'elsa-type (elsa-make-type ))
;; (put 'vconcat 'elsa-type (elsa-make-type ))
;; (put 'copy-sequence 'elsa-type (elsa-make-type ))
;; (put 'string-make-multibyte 'elsa-type (elsa-make-type ))
;; (put 'string-make-unibyte 'elsa-type (elsa-make-type ))
;; (put 'string-as-unibyte 'elsa-type (elsa-make-type ))
;; (put 'string-as-multibyte 'elsa-type (elsa-make-type ))
;; (put 'string-to-multibyte 'elsa-type (elsa-make-type ))
;; (put 'string-to-unibyte 'elsa-type (elsa-make-type ))
;; (put 'copy-alist 'elsa-type (elsa-make-type ))
;; (put 'substring 'elsa-type (elsa-make-type ))
;; (put 'substring-no-properties 'elsa-type (elsa-make-type ))
;; (put 'nthcdr 'elsa-type (elsa-make-type ))
;; (put 'nth 'elsa-type (elsa-make-type ))
;; (put 'elt 'elsa-type (elsa-make-type ))
;; (put 'member 'elsa-type (elsa-make-type ))
;; (put 'memq 'elsa-type (elsa-make-type ))
;; (put 'memql 'elsa-type (elsa-make-type ))
;; (put 'assq 'elsa-type (elsa-make-type ))
;; (put 'assoc 'elsa-type (elsa-make-type ))
;; (put 'rassq 'elsa-type (elsa-make-type ))
;; (put 'rassoc 'elsa-type (elsa-make-type ))
;; (put 'delq 'elsa-type (elsa-make-type ))
;; (put 'delete 'elsa-type (elsa-make-type ))
;; (put 'nreverse 'elsa-type (elsa-make-type ))
;; (put 'reverse 'elsa-type (elsa-make-type ))
;; (put 'sort 'elsa-type (elsa-make-type ))
;; (put 'plist-get 'elsa-type (elsa-make-type ))
;; (put 'get 'elsa-type (elsa-make-type ))
;; (put 'plist-put 'elsa-type (elsa-make-type ))
;; (put 'put 'elsa-type (elsa-make-type ))
;; (put 'lax-plist-get 'elsa-type (elsa-make-type ))
;; (put 'lax-plist-put 'elsa-type (elsa-make-type ))
;; (put 'eql 'elsa-type (elsa-make-type ))
;; (put 'equal 'elsa-type (elsa-make-type ))
;; (put 'equal-including-properties 'elsa-type (elsa-make-type ))
;; (put 'fillarray 'elsa-type (elsa-make-type ))
;; (put 'clear-string 'elsa-type (elsa-make-type ))
;; (put 'nconc 'elsa-type (elsa-make-type ))
;; (put 'mapconcat 'elsa-type (elsa-make-type ))
;; (put 'mapcar 'elsa-type (elsa-make-type ))
;; (put 'mapc 'elsa-type (elsa-make-type ))
;; (put 'yes-or-no-p 'elsa-type (elsa-make-type ))
;; (put 'load-average 'elsa-type (elsa-make-type ))
;; (put 'featurep 'elsa-type (elsa-make-type ))
;; (put 'provide 'elsa-type (elsa-make-type ))
;; (put 'require 'elsa-type (elsa-make-type ))
;; (put 'plist-member 'elsa-type (elsa-make-type ))
;; (put 'widget-put 'elsa-type (elsa-make-type ))
;; (put 'widget-get 'elsa-type (elsa-make-type ))
;; (put 'widget-apply 'elsa-type (elsa-make-type ))
;; (put 'locale-info 'elsa-type (elsa-make-type ))
;; (put 'base64-encode-region 'elsa-type (elsa-make-type ))
;; (put 'base64-encode-string 'elsa-type (elsa-make-type ))
;; (put 'base64-decode-region 'elsa-type (elsa-make-type ))
;; (put 'base64-decode-string 'elsa-type (elsa-make-type ))
;; (put 'sxhash 'elsa-type (elsa-make-type ))
;; (put 'make-hash-table 'elsa-type (elsa-make-type ))
;; (put 'copy-hash-table 'elsa-type (elsa-make-type ))
;; (put 'hash-table-count 'elsa-type (elsa-make-type ))
;; (put 'hash-table-rehash-size 'elsa-type (elsa-make-type ))
;; (put 'hash-table-rehash-threshold 'elsa-type (elsa-make-type ))
;; (put 'hash-table-size 'elsa-type (elsa-make-type ))
;; (put 'hash-table-test 'elsa-type (elsa-make-type ))
;; (put 'hash-table-weakness 'elsa-type (elsa-make-type ))
;; (put 'hash-table-p 'elsa-type (elsa-make-type ))
;; (put 'clrhash 'elsa-type (elsa-make-type ))
;; (put 'gethash 'elsa-type (elsa-make-type ))
;; (put 'puthash 'elsa-type (elsa-make-type ))
;; (put 'remhash 'elsa-type (elsa-make-type ))
;; (put 'maphash 'elsa-type (elsa-make-type ))
;; (put 'define-hash-table-test 'elsa-type (elsa-make-type ))
;; (put 'md5 'elsa-type (elsa-make-type ))
;; (put 'secure-hash 'elsa-type (elsa-make-type ))

;; boolean functions
(put 'not 'elsa-type (elsa-make-type Mixed -> Bool))

;; list functions
(put 'list 'elsa-type (elsa-make-type Mixed... -> List)) ;; TODO: variadic args?
(put 'nth 'elsa-type (elsa-make-type Int -> List -> Mixed))

;; string functions
(put 'split-string 'elsa-type (elsa-make-type String -> String -> List String))
(put 'concat 'elsa-type (elsa-make-type String... -> String))

;; sequence functions

;; built-in variables
(put 'command-line-args-left 'elsa-type-var (elsa-make-type List String | Nil))

;; help.el
(put 'help-function-arglist 'elsa-type (elsa-make-type Symbol -> List Symbol))

(provide 'elsa-typed-builtin)
